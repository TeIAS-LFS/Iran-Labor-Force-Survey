[["data-cleaning.html", "Chapter 5 Data Cleaning 5.1 Run All 5.2 Initializing 5.3 Installing Packages 5.4 Building Directory 5.5 Creating Path 5.6 Converting RDS 5.7 Form3 Cleaning 5.8 FORM2ZOJ Cleaning 5.9 FORM2KOL Cleaning 5.10 W3 Cleaning 5.11 Data Validation 5.12 Exporting DTA 5.13 Correcting Inconsistencies", " Chapter 5 Data Cleaning In this section, we explain the cleaning steps needed for LFS data. We divide the entire code in around 10 scripts (Find the codes in this link) and will explain each of them in turn. If you just want to clean the data without knowing the details of cleaning, you can just copy the raw data, files and codes in separate folders in your computer and the edit the 4 first lines in the first script (100_Run_all) and run it. After a while, you can find cleaned data in R and Stata formats in your computer and use Meta Data! file to understand the cleaned data. However, we suggest you to do the cleaning step by step and know what is happening. 5.1 Run All In this section, general information is specified, which should be changed commensurately with your pc. In fact, appropriate changes in this script allow other scripts to run on your computers without any problems. rm(list=ls()) # Before Running Code specify the directories in which your code, your files and your data stored. code_path = &quot;C:/Users/Dropbox/Research/LFS Cleaning/R Codes&quot; # change it to the path of codes in your computer. Find the codes here (link) Files_paths = &quot;C:/Users/Dropbox/Research/LFS Cleaning/Files&quot; #path of cleaning files (not raw data) in your computer. Find the cleaning files here (link) Path = &quot;F:/LFS&quot; # your working directory. Raw data should copy here in a sub folder named &quot;Raw data&quot; First_year = 84L # first year of the data you want to clean Last_year = 98L # last year of the data you want to clean source(paste0(code_path,&quot;/&quot;,&quot;101Initializing.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;110_Installing_packages.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;120_Building_directory.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;140_Create_path.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;150_Converting_RDS.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;160_Form3_Cleaning.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;170_Form2joz_Cleaning.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;180_Form2kol_Cleaning.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;190_W3_Cleaning.R&quot;)) source(paste0(code_path,&quot;/&quot;,&quot;200_Exporting_DTA.R&quot;)) 5.2 Initializing in this script, we specify the name of folders and path of them. You can change them or just use these default names. Raw_data = &quot;Raw data&quot; Imported_data = &quot;Imported data&quot; Processd_data = &quot;Processed data&quot; Processd_data_dta = &quot;processed data DTA&quot; Col_names = &quot;LFS_Col_name.xlsx&quot; F2J_Labels = &quot;Form2joz_Labels.xlsx&quot; F3_Labels = &quot;Form3_Labels.xlsx&quot; Season = c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;,&quot;04&quot;) N = First_year:Last_year Raw_data_path = paste0(Path,&quot;/&quot;,Raw_data) Imported_data_path = paste0(Path,&quot;/&quot;,Imported_data) Processd_data_Path = paste0(Path,&quot;/&quot;,Processd_data) Processd_data_Path_dta = paste0(Path,&quot;/&quot;,Processd_data_dta) Col_name_path = paste0(Files_paths,&quot;/&quot;,Col_names) F2J_Labels_path = paste0(Files_paths,&quot;/&quot;,F2J_Labels) F3_Labels_path = paste0(Files_paths,&quot;/&quot;,F3_Labels) 5.3 Installing Packages This section lists the packages required for the data cleaning process. It downloads, installs and loads packages that do not exist on your computer. And it only loads pre-installed packages. pkglist &lt;- c(&quot;tidyverse&quot;,&quot;readxl&quot;,&quot;foreign&quot;,&quot;writexl&quot;,&quot;RODBC&quot;,&quot;data.table&quot;,&quot;stringi&quot;, &quot;plyr&quot;,&quot;rio&quot;,&quot;haven&quot;,&quot;kableExtra&quot;,&quot;ggpubr&quot;) for (package in pkglist){ if ((eval(parse(text = paste0(&quot;require(&quot;,package,&quot;)&quot;)))==FALSE)) { install.packages(package) } } 5.4 Building Directory Running this script, similar to how raw data is stored on your computer, creates new folders to store raw data in RDS format without any changes. Also, a Processed data folder and sub-folders are created for each year to put the cleaned data in it. This script consists of three blocks. In the first block, it checks to see if there is a raw data folder on your PC, and if it exists, it tells you to make sure it is not empty. if (file.exists(Path)){ if(file.exists(Raw_data_path)){ print(&quot;you have Raw_data folder in your PC, make sure this folder was not empty&quot;) }else{ print(&quot;you have no raw data&quot;) } }else{ dir.create(Path) } In the second block, it creates an imported data folder just like the raw data folder(this folder is a copy of the Raw data folder without any data and with a new name which is imported data) RDFP &lt;- list.dirs(paste0(Raw_data_path)) #raw data folders path IDFP &lt;- str_replace(RDFP,Raw_data,Imported_data) #imported data folder path for (i in 1:length(IDFP)) { if (file.exists(IDFP[i])) { NULL }else{ dir.create(IDFP[i]) } } Finally, in the third block, it creates a processed data folder that cleaned data will be stored in it. if(file.exists(Processd_data_Path)){ for (year in N){ if(file.exists(paste0(Processd_data_Path,&quot;/&quot;,year))){ NULL }else{ dir.create(paste0(Processd_data_Path,&quot;/&quot;,year)) } } }else{ dir.create(Processd_data_Path) for (year in N) { dir.create(paste0(Processd_data_Path,&quot;/&quot;,year)) } } 5.5 Creating Path This section aims to write a code in which the address of all the raw data stored in the Raw_path vector. Also, a new vector is created from this vector, which is the address of Raw data in RDS format. In fact, building these two vectors helps to change the format of data easily. library(&quot;stringi&quot;) Raw_path&lt;- list.files(Raw_data_path,pattern = &quot;FORM2JOZ|FORM2KOL|FORM3|W3|.mdb&quot;, full.names = TRUE,recursive = TRUE) RDS_path &lt;- str_replace(Raw_path,&quot;.xlsx|.DBF|.mdb|.dta&quot;,&quot;.RDS&quot;) 5.6 Converting RDS In this section, raw data is stored in RDS format without any changes in the imported data folder. Since in the previous section, vectors of raw data addresses in their initial format and RDS format were created, it is enough to write a for loop that loads the raw data and saves it in RDS format in The imported data folder. As you probably noticed from the previous section, the format of raw data is .xlsx, .DBF(dBase database file), .dta(stats data sets) and .mdb. for loading .xlsx files we use readxl package for .dta files we use haven package for .DBF files we use foreign package, and for loading .mdb files, we use the RODBC package. reading access file is a little tricky in R, and you can find helpful guidance in this link library(&quot;stringi&quot;) library(&quot;readxl&quot;) library(&quot;foreign&quot;) library(&quot;haven&quot;) library(&quot;RODBC&quot;) for (i in 1:length(Raw_path)) { if (str_detect(Raw_path[i],&quot;.xlsx&quot;)) { s = read_excel(Raw_path[i],col_types = &quot;text&quot;) saveRDS(s,RDS_path[i]) }else if (str_detect(Raw_path[i],&quot;.DBF&quot;)) { s = read.dbf(Raw_path[i],as.is = TRUE) saveRDS(s,RDS_path[i]) }else if (str_detect(Raw_path[i],&quot;.mdb&quot;)) { db &lt;-paste0(&quot;Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=&quot;,Raw_path[i]) con &lt;- odbcDriverConnect(db) a &lt;- sqlTables(con) LFS &lt;- as_tibble(sqlFetch (con ,a$TABLE_NAME[length(a$TABLE_NAME)],rownames=TRUE)) saveRDS(LFS,RDS_path[i]) odbcClose(con) }else if(str_detect(Raw_path[i],&quot;.dta&quot;)){ s = read_dta(Raw_path[i]) saveRDS(s,RDS_path[i]) } } 5.7 Form3 Cleaning 5.7.1 Renaming variables and integrating data As you can see in the table below, which is part of an LFS_Col_names.xlsx. The names of the variables differ in different years, all of which must be converted to a single name, the first row of this table. In fact, the purpose of creating this file is that we can change the names of variables without the need to change the code and only by changing the Excel file. Table 5.1: FORM3 Varibles Name Year_Season F3_D08 F3_D09 F3_D10 F3_D11 F3_D12 F3_D13 8401 D06 D08 D07 D09 D10 D11 8701 D08 D09 D10 D11 D12 D13 9802 F3_D08 F3_D09 F3_D10 F3_D11 F3_D12 F3_D13 For renaming the variable, we run the following code, which loads FORM3.RDS from its path, which was created in the previous part, and changes the Var names to the desired one according to LFS_Col_name.xlsx. F3_colnames &lt;- read_xlsx(Col_name_path,sheet = &quot;FORM3&quot;) F3_RDS_Path &lt;- RDS_path[str_detect(RDS_path,&quot;FORM3.RDS|9802|9803|9804&quot;)] for (year in First_year:Last_year) { index &lt;- match(F3_colnames$Year_Season[str_detect(F3_colnames$Year_Season,paste0(&quot;^&quot;,year))],F3_colnames$Year_Season) FORM3 &lt;- tibble() for (j in index) { F3 &lt;- readRDS(F3_RDS_Path[str_detect(F3_RDS_Path,as.character(F3_colnames$Year_Season[j]))]) for (i in 2:length(colnames(F3_colnames))) { names(F3)[names(F3) == eval(parse(text=paste0(&quot;F3_colnames&quot;,&quot;$&quot;,colnames(F3_colnames)[i])))[j]] &lt;- colnames(F3_colnames)[i] } F3 &lt;- F3 %&gt;% mutate_all(as.character) FORM3 &lt;- bind_rows(FORM3,F3) } } Correcting Pkey in 2005 The third and fourth digits of the Pkey in 2005, unlike other years, show the month, not the seasons, which we turn into the season as follows. FORM3 &lt;- FORM3%&gt;% mutate(Season = ifelse(str_sub(Pkey,3,4) %in% c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;),&quot;01&quot;, ifelse(str_sub(Pkey,3,4) %in% c(&quot;04&quot;,&quot;05&quot;,&quot;06&quot;),&quot;02&quot;, ifelse(str_sub(Pkey,3,4) %in% c(&quot;07&quot;,&quot;08&quot;,&quot;09&quot;),&quot;03&quot;,&quot;04&quot;))))%&gt;% mutate(Pkey = paste0(str_sub(Pkey,1,2),Season,str_sub(Pkey,5,14)))%&gt;% select(-Season) Questionnaire inconsistencies Questionnaire No. 3 of the LFS plan has changed over time. Some of these changes are related to changing the order of the questions, in which case changing the names of the variables leads us to our goal of unifying the variables over time, and others go beyond that. In the following, we will examine these discrepancies and provide a suitable solution to resolve them. FORM3 &lt;- FORM3%&gt;% mutate(F3_D02 = case_when( (F3_D02_87 == &quot;1&quot; | F3_D04_87 == &quot;1&quot; | F3_D05_87 == &quot;1&quot;) ~ &quot;1&quot;, (F3_D02_87 == &quot;2&quot; &amp; F3_D04_87 == &quot;2&quot; &amp; F3_D05_87 == &quot;2&quot;) ~ &quot;2&quot; )) 5.7.2 Label assimilations In different years, the values of the variables are stored differently, despite the same meanings. Therefore, we must convert these values to the same one, to be able to compare economic variables over time. To do this, just like what was done to rename the variables, an excel table has been prepared in which it is specified how the values of the variables are stored each year and how much should be converted to the same value. The following is an excerpt from this Excel file. The following code in each year change the labels to the desired one for (year in First_year:Last_year) { FORM3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/FORM3.RDS&quot;)) Fac_vars &lt;- excel_sheets(F3_Labels_path) Fac_vars &lt;- Fac_vars[excel_sheets(F3_Labels_path) %in% colnames(FORM3)] for (i in 1:length(Fac_vars)) { Levels &lt;- read_xlsx(F3_Labels_path,sheet = Fac_vars[i]) Levels[Levels == &quot;space&quot;] &lt;- &quot; &quot; Levels[Levels == &quot;2space&quot;] &lt;- &quot; &quot; Levels[Levels == &quot;0space&quot;] &lt;- &quot;&quot; Levels_Value &lt;- colnames(Levels)[!str_detect(colnames(Levels),&quot;\\\\...&quot;)] for (j in 2:length(Levels_Value)) { L &lt;- eval(parse(text = paste0(&quot;FORM3$&quot;,Fac_vars[i],&quot;==&quot;,&quot;Levels$&quot;,Levels_Value[j],&quot;[Levels$Year ==&quot;,year,&quot;]&quot;))) eval(parse(text = paste0(&quot;FORM3$&quot;,Fac_vars[i],&quot;[L]&quot;,&quot; &lt;- &quot;,&quot;Levels$&quot;,Levels_Value[j],&quot;[1]&quot;))) } } 5.7.3 Unknowns The values of some variables are letters such as &amp;, &amp;&amp;, @(_?) and -_, that do not have a specific meaning, or at least the Statistical Center of Iran regarding these values has published no explanation. These values converted to missing in labels assimilation part Number of observation in which the value of variables are unknown are described below &amp;&amp; Table 5.2: FORM3 &amp;&amp; Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Degree 162 89 34 0 0 0 0 0 0 0 0 0 0 0 0 &amp; Table 5.3: FORM3 &amp; Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Nationality 9 0 1 0 4 0 0 0 0 0 1 0 0 0 0 Residence_Status 196 12 9 1 0 0 0 0 1 0 1 0 0 0 0 Residence_Duration 7 2 0 0 0 0 0 0 0 0 0 0 0 0 0 F2_D12 5 3 0 8 0 0 0 0 18 0 18 33 24 34 25 F2_D14 0 0 0 0 0 0 0 0 0 0 1 0 0 2 0 Student 10 5 1 1 26 0 0 0 8 0 0 0 0 0 0 Literacy 0 0 0 0 26 0 0 0 0 0 0 0 0 0 0 Marriage_Status 22 9 1 0 0 0 0 0 0 0 0 0 0 9 15 5.7.4 Creating NR NR stands for Not Related, and we defined this value for all variables to get a true picture of the Missing data. In fact, if we examine the raw data, we see many missing observations, which may confuse us at first glance, but this is not the case. Most of these missings are because the question corresponding to these variables is not asked from some individuals in Sample. NR labels are created according to the following flowcharts. For example, questions 2-7 are not related to individuals who answer yes to question 1. For Creating NR labels, we should translate the above flowchart to R codes. For doing so, we run following code. for (year in N) { FORM3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/FORM3.RDS&quot;)) if(year &lt; 87){ FORM3 &lt;- FORM3%&gt;% mutate(F3_D02 = ifelse(is.na(F3_D02) &amp; (F3_D01 == &quot;Yes&quot;),&quot;NR&quot;,F3_D02), F3_D03 = ifelse(is.na(F3_D03) &amp; (F3_D02 !=&quot;No&quot;),&quot;NR&quot;,F3_D03), F3_D06 = ifelse(is.na(F3_D06) &amp; (F3_D03 !=&quot;No&quot;),&quot;NR&quot;,F3_D06), F3_D07 = ifelse(is.na(F3_D07) &amp; (F3_D06 !=&quot;No&quot;),&quot;NR&quot;,F3_D07), F3_D08 = ifelse(is.na(F3_D08) &amp; (F3_D06 == &quot;No&quot;),&quot;NR&quot;,F3_D08), F3_D09 = ifelse(is.na(F3_D09) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D09), F3_D10 = ifelse(is.na(F3_D10) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D10), F3_D11 = ifelse(is.na(F3_D11) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D11), F3_D12 = ifelse(is.na(F3_D12) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D12), F3_D13 = ifelse(is.na(F3_D13) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D13), F3_D14SAL = ifelse(is.na(F3_D14SAL) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D14SAL), F3_D14MAH = ifelse(is.na(F3_D14MAH) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D14MAH), F3_D15SAL = ifelse(is.na(F3_D15SAL) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D15SAL), F3_D15MAH = ifelse(is.na(F3_D15MAH) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D15MAH), F3_D16SHASLIR = ifelse(is.na(F3_D16SHASLIR) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D16SHASLIR), F3_D16SHASLIS = ifelse(is.na(F3_D16SHASLIS) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D16SHASLIS), F3_D16SHHAMRO = ifelse(is.na(F3_D16SHHAMRO) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D16SHHAMRO), F3_D16SHHAMSA = ifelse(is.na(F3_D16SHHAMSA) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D16SHHAMSA), F3_D17 = ifelse(is.na(F3_D17) &amp; (F3_D08 == &quot;NR&quot;|F3_D16SHHAMSA &gt;=44),&quot;NR&quot;,F3_D17), F3_D18SHANBEH = ifelse(is.na(F3_D18SHANBEH) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18SHANBEH), F3_D18YEKSHAN = ifelse(is.na(F3_D18YEKSHAN) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18YEKSHAN), F3_D18DOSHANB = ifelse(is.na(F3_D18DOSHANB) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18DOSHANB), F3_D18SESHANB = ifelse(is.na(F3_D18SESHANB) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18SESHANB), F3_D18CHARSHA = ifelse(is.na(F3_D18CHARSHA) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18CHARSHA), F3_D18PANSHAN = ifelse(is.na(F3_D18PANSHAN) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18PANSHAN), F3_D18JOMEH = ifelse(is.na(F3_D18JOMEH) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18JOMEH), F3_D18JAM = ifelse(is.na(F3_D18JAM) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D18JAM), F3_D19 = ifelse(is.na(F3_D19) &amp; (F3_D08 == &quot;NR&quot;|F3_D16SHHAMSA &gt;= F3_D18JAM),&quot;NR&quot;,F3_D19), F3_D20 = ifelse(is.na(F3_D20) &amp; (F3_D08 == &quot;NR&quot;|F3_D16SHHAMSA &lt;= F3_D18JAM),&quot;NR&quot;,F3_D20), F3_D21 = ifelse(is.na(F3_D21) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D21), F3_D22 = ifelse(is.na(F3_D22) &amp; (F3_D08 == &quot;NR&quot;|F3_D21 == &quot;No&quot;),&quot;NR&quot;,F3_D22), F3_D23 = ifelse(is.na(F3_D23) &amp; (F3_D08 == &quot;NR&quot;|F3_D21 == &quot;No&quot;|F3_D22 == &quot;No&quot;),&quot;NR&quot;,F3_D23), F3_D24 = ifelse(is.na(F3_D24) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D24), F3_D25 = ifelse(is.na(F3_D25) &amp; (F3_D08 == &quot;NR&quot;|F3_D24 == &quot;No&quot;),&quot;NR&quot;,F3_D25), F3_D26 = ifelse(is.na(F3_D26) &amp; (F3_D08 == &quot;NR&quot;|F3_D24 == &quot;No&quot;),&quot;NR&quot;,F3_D26), F3_D27ROZ = ifelse(is.na(F3_D27ROZ) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D27ROZ), F3_D27SAAT = ifelse(is.na(F3_D27SAAT) &amp; (F3_D08 == &quot;NR&quot;),-1,F3_D27SAAT), F3_D28 = ifelse(is.na(F3_D28) &amp; (F3_D08 == &quot;NR&quot;|F3_D08 == &quot;No&quot;),&quot;NR&quot;,F3_D28), F3_D29 = ifelse(is.na(F3_D29) &amp; (F3_D08 == &quot;NR&quot;|F3_D08 == &quot;No&quot;),&quot;NR&quot;,F3_D29), F3_D30 = ifelse(is.na(F3_D30) &amp; (F3_D08 == &quot;NR&quot;|F3_D08 == &quot;No&quot;),&quot;NR&quot;,F3_D30), F3_D31 = ifelse(is.na(F3_D31) &amp; (F3_D06 != &quot;No&quot;),&quot;NR&quot;,F3_D31), F3_D1_32 = ifelse(is.na(F3_D1_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D1_32), F3_D2_32 = ifelse(is.na(F3_D2_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D2_32), F3_D3_32 = ifelse(is.na(F3_D3_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D3_32), F3_D4_32 = ifelse(is.na(F3_D4_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D4_32), F3_D5_32 = ifelse(is.na(F3_D5_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D5_32), F3_D6_32 = ifelse(is.na(F3_D6_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D6_32), F3_D7_32 = ifelse(is.na(F3_D7_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D7_32), F3_D8_32 = ifelse(is.na(F3_D8_32) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;No&quot;),&quot;NR&quot;,F3_D8_32), F3_D33 = ifelse(is.na(F3_D33) &amp; (F3_D31 == &quot;NR&quot;|F3_D31 == &quot;Yes&quot;),&quot;NR&quot;,F3_D33), EX_D36 = ifelse(is.na(EX_D36) &amp; (F3_D33 == &quot;NR&quot;|!(F3_D33 %in% c(&quot;First&quot; , &quot;Secound&quot;))),&quot;NR&quot;,EX_D36), EX_D37SAL = ifelse(is.na(EX_D37SAL) &amp; (EX_D36 == &quot;NR&quot;|EX_D36 == &quot;No&quot;),-1,EX_D37SAL), EX_D37MAH = ifelse(is.na(EX_D37MAH) &amp; (EX_D36 == &quot;NR&quot;|EX_D36 == &quot;No&quot;),-1,EX_D37MAH), F3_D34 = ifelse(is.na(F3_D34) &amp; (F3_D08 == &quot;NR&quot;),&quot;NR&quot;,F3_D34), F3_D35SAL = ifelse(is.na(F3_D35SAL) &amp; (F3_D31 != &quot;Yes&quot;),-1,F3_D35SAL), F3_D35MAH = ifelse(is.na(F3_D35MAH) &amp; (F3_D31 != &quot;Yes&quot;),-1,F3_D35MAH), F3_D36 = ifelse(is.na(F3_D36) &amp; (F3_D31 == &quot;NR&quot;|EX_D36 == &quot;No&quot;|!(F3_D33 %in% c(&quot;First&quot; , &quot;Secound&quot;))),&quot;NR&quot;,F3_D36), F3_D37SAL = ifelse(is.na(F3_D37SAL) &amp; (F3_D36 == &quot;NR&quot;|F3_D36 != &quot;Working&quot;),-1,F3_D37SAL), F3_D37MAH = ifelse(is.na(F3_D37MAH) &amp; (F3_D36 == &quot;NR&quot;|F3_D36 != &quot;Working&quot;),-1,F3_D37MAH), F3_D38 = ifelse(is.na(F3_D38) &amp; (F3_D31 == &quot;NR&quot;|EX_D36 == &quot;No&quot;|!(F3_D33 %in% c(&quot;First&quot; , &quot;Secound&quot;))),&quot;NR&quot;,F3_D38), F3_D39 = ifelse(is.na(F3_D39) &amp; (F3_D06 != &quot;No&quot;),&quot;NR&quot;,F3_D39), F3_D40SAL = ifelse(is.na(F3_D40SAL) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),-1,F3_D40SAL), F3_D40MAH = ifelse(is.na(F3_D40MAH) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),-1,F3_D40MAH), F3_D41 = ifelse(is.na(F3_D41) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),&quot;NR&quot;,F3_D41), F3_D42 = ifelse(is.na(F3_D42) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),&quot;NR&quot;,F3_D42), F3_D43 = ifelse(is.na(F3_D43) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),&quot;NR&quot;,F3_D43), F3_D44 = ifelse(is.na(F3_D44) &amp; (F3_D39 == &quot;NR&quot;|F3_D39 == &quot;No&quot;),&quot;NR&quot;,F3_D44), F3_D45 = ifelse(is.na(F3_D45) &amp; (F3_D38 == &quot;NR&quot;),&quot;NR&quot;,F3_D45), F3_D46 = ifelse(is.na(F3_D46) &amp; (F3_D45 == &quot;NR&quot;|F3_D45 == &quot;Yes&quot;),&quot;NR&quot;,F3_D46), F3_D47 = ifelse(is.na(F3_D47) &amp; (F3_D31 == &quot;NR&quot;|F3_D45 == &quot;Yes&quot;),&quot;NR&quot;,F3_D47), F3_D49 = ifelse(is.na(F3_D49) &amp; (F3_D06==&quot;NR&quot;|F3_D06== &quot;Yes&quot;),&quot;NR&quot;,F3_D49), F3_D50 = ifelse(is.na(F3_D50) &amp; (F3_D06==&quot;NR&quot;|F3_D06== &quot;Yes&quot;),&quot;NR&quot;,F3_D50)) } if (year &gt;= 87) { FORM3 &lt;- FORM3%&gt;% mutate(F3_D02_87 = ifelse(is.na(F3_D02_87) &amp; (F3_D01 == &quot;Yes&quot;) ,&quot;NR&quot;,F3_D02_87), F3_D03 = ifelse(is.na(F3_D03) &amp; (F3_D02_87 == &quot;NR&quot;|F3_D02_87==&quot;Yes&quot;) ,&quot;NR&quot;,F3_D03), F3_D04_87 = ifelse(is.na(F3_D04_87) &amp; (F3_D03 == &quot;NR&quot; | F3_D03 == &quot;Yes&quot;) ,&quot;NR&quot;,F3_D04_87), F3_D05_87 = ifelse(is.na(F3_D05_87) &amp; (F3_D04_87 == &quot;NR&quot; | F3_D04_87 == &quot;Yes&quot;) ,&quot;NR&quot;,F3_D05_87), F3_D06 = ifelse(is.na(F3_D06) &amp; (F3_D05_87 == &quot;NR&quot;|F3_D05_87==&quot;Yes&quot;) ,&quot;NR&quot;,F3_D06), F3_D07 = ifelse(is.na(F3_D07) &amp; (F3_D06 == &quot;NR&quot; |F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D07), F3_D08 = ifelse(is.na(F3_D08) &amp; (F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D08), F3_D09 = ifelse(is.na(F3_D09) &amp; (F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D09), F3_D10 = ifelse(is.na(F3_D10) &amp;(F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D10), F3_D11 = ifelse(is.na(F3_D11) &amp; (F3_D06 == &quot;No&quot;) ,&quot;NR&quot;,F3_D11), F3_D12 = ifelse(is.na(F3_D12) &amp; (F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D12), F3_D13 = ifelse(is.na(F3_D13) &amp; (F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D13), F3_D14SAL = ifelse(is.na(F3_D14SAL) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D14SAL), F3_D14MAH = ifelse(is.na(F3_D14MAH) &amp; (F3_D06 == &quot;No&quot;) ,-1,F3_D14MAH), F3_D15SAL = ifelse(is.na(F3_D15SAL) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D15SAL), F3_D15MAH = ifelse(is.na(F3_D15MAH) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D15MAH), F3_D16SHASLIR = ifelse(is.na(F3_D16SHASLIR) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D16SHASLIR), F3_D16SHASLIS = ifelse(is.na(F3_D16SHASLIS) &amp; (F3_D06 == &quot;No&quot;) ,-1,F3_D16SHASLIS), F3_D16SHHAMRO = ifelse(is.na(F3_D16SHHAMRO) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D16SHHAMRO), F3_D16SHHAMSA = ifelse(is.na(F3_D16SHHAMSA) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D16SHHAMSA), F3_D17 = ifelse(is.na(F3_D17) &amp; (F3_D06 == &quot;No&quot; |F3_D16SHHAMSA &gt;=44 ) ,&quot;NR&quot;,F3_D17 ), F3_D18SHANBEH = ifelse(is.na(F3_D18SHANBEH) &amp; (F3_D06 == &quot;No&quot;) ,-1 ,F3_D18SHANBEH ), F3_D18YEKSHAN = ifelse(is.na(F3_D18YEKSHAN) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18YEKSHAN ), F3_D18DOSHANB = ifelse(is.na(F3_D18DOSHANB) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18DOSHANB ), F3_D18SESHANB = ifelse(is.na(F3_D18SESHANB) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18SESHANB ), F3_D18CHARSHA = ifelse(is.na(F3_D18CHARSHA) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18CHARSHA ), F3_D18PANSHAN = ifelse(is.na(F3_D18PANSHAN) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18PANSHAN ), F3_D18JOMEH = ifelse(is.na(F3_D18JOMEH) &amp; (F3_D06 == &quot;No&quot;) ,-1 ,F3_D18JOMEH ), F3_D18JAM = ifelse(is.na(F3_D18JAM) &amp; (F3_D06 == &quot;No&quot; ) ,-1 ,F3_D18JAM ), F3_D19 = ifelse(is.na(F3_D19) &amp; (F3_D06 == &quot;No&quot; |F3_D18JAM &gt;= F3_D16SHHAMSA) ,&quot;NR&quot;,F3_D19), F3_D20 = ifelse(is.na(F3_D20) &amp; (F3_D06 == &quot;No&quot; |F3_D18JAM &lt;= F3_D16SHHAMSA) ,&quot;NR&quot;,F3_D20), F3_D21 = ifelse(is.na(F3_D21) &amp; (F3_D06 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D21), F3_D22 = ifelse(is.na(F3_D22) &amp; (F3_D06 == &quot;No&quot;|F3_D21==&quot;No&quot;) ,&quot;NR&quot;,F3_D22), F3_D23 = ifelse(is.na(F3_D23) &amp; (F3_D06 == &quot;No&quot;|F3_D21==&quot;No&quot; ) ,&quot;NR&quot;,F3_D23), F3_D24 = ifelse(is.na(F3_D24) &amp; (FORM3$F3_D06 == &quot;No&quot;) ,&quot;NR&quot;,F3_D24), F3_D25 = ifelse(is.na(F3_D25) &amp; (F3_D06 == &quot;No&quot;|F3_D24==&quot;No&quot; ) ,&quot;NR&quot;,F3_D25), F3_D26 = ifelse(is.na(F3_D26) &amp; (F3_D06 == &quot;No&quot;|F3_D24==&quot;No&quot; ) ,&quot;NR&quot;,F3_D26), F3_D27ROZ = ifelse(is.na(F3_D27ROZ) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D27ROZ), F3_D27SAAT = ifelse(is.na(F3_D27SAAT) &amp; (F3_D06 == &quot;No&quot; ) ,-1,F3_D27SAAT), F3_D28 = ifelse(is.na(F3_D28) &amp; (F3_D06 == &quot;No&quot;|F3_D08 == &quot;No&quot; ) ,&quot;NR&quot;, F3_D28), F3_D29 = ifelse(is.na(F3_D29) &amp; (F3_D06 == &quot;No&quot;|F3_D08 == &quot;No&quot; ) ,&quot;NR&quot;, F3_D29), F3_D30 = ifelse(is.na(F3_D30) &amp; (F3_D06 == &quot;No&quot;|F3_D08 == &quot;No&quot; ) ,&quot;NR&quot;,F3_D30), F3_D31 = ifelse(is.na(F3_D31) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot; ) ,&quot;NR&quot;,F3_D31), F3_D1_32 = ifelse(is.na(F3_D1_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D1_32 ), F3_D2_32 = ifelse(is.na(F3_D2_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D2_32 ), F3_D3_32 = ifelse(is.na(F3_D3_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D3_32 ), F3_D4_32 = ifelse(is.na(F3_D4_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D4_32 ), F3_D5_32 = ifelse(is.na(F3_D5_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D5_32 ), F3_D6_32 = ifelse(is.na(F3_D6_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ), &quot;NR&quot;,F3_D6_32 ), F3_D7_32 = ifelse(is.na(F3_D7_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D7_32 ), F3_D8_32 = ifelse(is.na(F3_D8_32) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;No&quot; ) ,&quot;NR&quot;,F3_D8_32 ), F3_D33 = ifelse(is.na(F3_D33) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|F3_D31==&quot;Yes&quot; ) ,&quot;NR&quot;,F3_D33), F3_D34 = ifelse(is.na(F3_D34) &amp; (F3_D06 == &quot;NR&quot;|F3_D06 == &quot;Yes&quot;|!(F3_D33 %in% c(&quot;First&quot;,&quot;Secound&quot;))),&quot;NR&quot;,F3_D34), F3_D35SAL = ifelse(is.na(F3_D35SAL) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot; ), -1,F3_D35SAL), F3_D35MAH = ifelse(is.na(F3_D35MAH) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot; ), -1,F3_D35MAH), F3_D36 = ifelse(is.na(F3_D36) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot; ), &quot;NR&quot;,F3_D36), F3_D37SAL = ifelse(is.na(F3_D37SAL) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot;|!(F3_D36 %in% c(&quot;Working&quot;))),-1,F3_D37SAL), F3_D37MAH = ifelse(is.na(F3_D37MAH) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot;|!(F3_D36 %in% c(&quot;Working&quot;))),-1,F3_D37MAH), F3_D38 = ifelse(is.na(F3_D38) &amp; (F3_D34==&quot;NR&quot;|F3_D34 == &quot;No&quot;|!(F3_D36 %in% c(&quot;Working&quot;))),&quot;NR&quot;,F3_D38), F3_D39 = ifelse(is.na(F3_D39) &amp; (F3_D34==&quot;NR&quot;|F3_D34== &quot;No&quot; ),&quot;NR&quot;,F3_D39), F3_D40SAL = ifelse(is.na(F3_D40SAL) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ), -1,F3_D40SAL), F3_D40MAH = ifelse(is.na(F3_D40MAH) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ),-1,F3_D40MAH), F3_D41 = ifelse(is.na(F3_D41) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ) ,&quot;NR&quot;,F3_D41), F3_D42 = ifelse(is.na(F3_D42) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ),&quot;NR&quot;,F3_D42), F3_D43 = ifelse(is.na(F3_D43) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ), -1,F3_D43), F3_D44 = ifelse(is.na(F3_D44) &amp; (F3_D39==&quot;NR&quot;|F3_D39== &quot;No&quot; ) ,-1,F3_D44), F3_D45 = ifelse(is.na(F3_D45) &amp; (F3_D31==&quot;NR&quot;|F3_D33 %in% c(&quot;Seventh&quot;,&quot;Eighth&quot;,&quot;Ninth&quot;,&quot;Tenth&quot;,&quot;Eleventh&quot;,&quot;Twelfth&quot;)|F3_D34==&quot;No&quot;|F3_D39%in%c(&quot;Yes&quot;,&quot;No&quot;)),&quot;NR&quot;,F3_D45), F3_D46 = ifelse(is.na(F3_D46) &amp; (F3_D31==&quot;NR&quot;|F3_D33 %in% c(&quot;Seventh&quot;,&quot;Eighth&quot;,&quot;Ninth&quot;,&quot;Tenth&quot;,&quot;Eleventh&quot;,&quot;Twelfth&quot;)|F3_D39==&quot;No&quot;|F3_D45== &quot;Yes&quot; ),&quot;NR&quot;,F3_D46), F3_D47 = ifelse(is.na(F3_D47) &amp; (F3_D31==&quot;NR&quot;|F3_D39 %in% c(&quot;Yes&quot;,&quot;No&quot;) ) ,&quot;NR&quot;,F3_D47), F3_D49 = ifelse(is.na(F3_D49) &amp; (F3_D06==&quot;NR&quot;|F3_D06== &quot;Yes&quot;), &quot;NR&quot;,F3_D49), F3_D50 = ifelse(is.na(F3_D50) &amp; (F3_D06==&quot;NR&quot;|F3_D06== &quot;Yes&quot;),&quot;NR&quot;,F3_D50)) FORM3 &lt;- FORM3%&gt;% mutate(F3_D02 = case_when( F3_D02_87 == &quot;Yes&quot; | F3_D04_87 == &quot;Yes&quot; | F3_D05_87 == &quot;Yes&quot; ~ &quot;Yes&quot;, F3_D02_87 == &quot;No&quot; &amp; F3_D04_87 == &quot;No&quot; &amp; F3_D05_87 == &quot;No&quot; ~ &quot;No&quot;, F3_D02_87 == &quot;NR&quot; &amp; F3_D04_87 == &quot;NR&quot; &amp; F3_D05_87 == &quot;NR&quot; ~ &quot;NR&quot;)) } saveRDS(FORM3,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM3.RDS&quot;)) } As mentioned Defining Not related label help us to understand data in a better way and have a true picture of missings. By comparing the two following tables, we can see a large number of missings reductions, which tell that many missing before creating NR are not due to dont answer the question but also due to not asking the questions Table 5.4: FORM3 NAs Befor Creating NR Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 F3_D02 164842 156481 149862 162459 161748 152359 148220 145202 181031 180064 183278 179537 185386 189670 193340 F3_D03 177994 169756 161987 148356 141988 135440 134305 132039 170059 169572 172255 168660 173614 178682 182129 F3_D06 192077 185848 179672 167041 166037 156496 151640 149049 185426 184644 189039 186222 192528 198098 201475 F3_D07 559589 547026 531310 513705 500017 489148 485269 471175 567216 574652 575679 568364 569865 574986 580464 F3_D08 367487 361152 351630 347075 334298 333350 334056 322388 382049 389999 386591 382145 377327 376880 379139 F3_D09 367487 361152 351630 346661 333978 332641 333609 322119 381778 389972 386590 382130 377326 376875 0 F3_D10 367487 361152 351630 346661 333978 332641 333609 322119 381778 389972 386589 382130 377326 376875 0 F3_D11 367492 361176 351632 346661 333978 332641 333609 322119 381778 389972 386591 382130 377326 376880 378981 F3_D12 367662 361332 351760 375849 359622 356253 356916 344516 413407 420769 417053 412571 407511 407786 408131 F3_D13 367498 361176 351641 346670 333992 332649 333621 322122 382037 390322 386879 382302 377427 377057 379138 F3_D14SAL 367536 361170 351631 346661 333989 332641 333613 322123 381783 389972 386593 382132 377330 376905 378983 F3_D14MAH 367547 361175 351630 346662 333987 332641 333613 322123 381805 389972 386602 382147 377331 376905 378983 F3_D15SAL 367552 361199 351630 346661 333989 332642 333614 322123 381783 389972 386593 382131 377330 376904 378983 F3_D15MAH 367566 361201 351635 346664 333992 332643 333614 322123 381810 389972 386613 382152 377337 376904 378983 F3_D16SHASLIR 367487 361152 351630 349486 336627 335405 336636 324542 383986 392376 388920 385496 380221 379932 379115 F3_D16SHASLIS 367487 361152 351630 349481 336615 335399 336633 324539 383986 392376 388920 385496 380221 379932 379115 F3_D16SHHAMRO 367487 361152 351630 349473 336530 335377 336629 324533 383986 392362 388905 385485 380210 379916 379115 F3_D16SHHAMSA 367487 361152 351630 349468 336518 335371 336625 324530 383986 392362 388905 385485 380210 379916 379115 F3_D17 502706 491111 478534 461828 438299 430678 433454 418882 506519 513225 510626 500132 500180 502171 507912 F3_D18SHANBEH 367845 361227 351670 347217 334008 332668 333648 322134 381996 390080 386728 382192 377387 377051 378995 F3_D18YEKSHAN 367637 361223 351664 347228 333998 332668 333676 322151 382128 390097 386697 382179 377410 377055 379000 F3_D18DOSHANB 367617 361224 351677 347225 334001 332664 333642 322129 382085 390102 386689 382183 377390 377045 378995 F3_D18SESHANB 367616 361251 351668 347246 334007 332668 333675 322145 382264 390162 386720 382195 377417 377058 379005 F3_D18CHARSHA 367622 361234 351665 347241 334004 332671 333667 322133 382332 390125 386713 382202 377416 377136 379003 F3_D18PANSHAN 367676 361246 351680 347269 334020 332688 333711 322154 382838 390281 386889 382312 377523 377242 379020 F3_D18JOMEH 368082 361443 351856 347472 334123 332836 333923 322229 385155 391089 387867 382889 378105 377945 379193 F3_D18JAM 367529 361168 351635 347181 333978 332641 333609 322119 381778 389972 386591 382130 377326 376944 378988 F3_D19 531023 529955 512904 501325 484428 474521 466381 455032 540711 546227 553076 537177 547761 540648 549718 F3_D20 564860 551746 535383 516669 503529 493325 490479 474899 573543 580301 580444 576258 576051 581803 584097 F3_D21 367487 361152 351630 346661 333979 332641 333609 322119 381833 390001 386609 382138 377330 376903 378998 F3_D22 526674 520514 507716 489661 468415 458124 462733 448943 540982 547447 546429 539218 539235 541518 546482 F3_D23 530222 522719 509631 491597 471532 461128 464584 451245 543249 549595 548472 541523 541488 543521 548440 F3_D24 367487 361152 351630 346661 333979 332641 333609 322119 381826 390022 386619 382137 377330 376907 379003 F3_D25 556932 545579 529107 509456 494940 484558 482762 467731 562717 569330 568949 562936 562995 566747 570992 F3_D26 556928 545586 529117 509532 495029 484659 482820 467788 562979 569679 569391 563196 563261 567087 571323 F3_D27ROZ 367501 361158 351633 346786 334300 332818 333633 322120 381782 389972 386591 382136 377328 376946 379213 F3_D27SAAT 367500 361158 351633 346786 334302 332818 333633 322120 381782 389972 386591 382136 377328 376946 379213 F3_D28 553627 547112 532763 514969 500335 490494 488196 473343 571581 577219 576398 571722 570155 574510 433329 F3_D29 553627 547112 532763 514970 500335 490494 488196 473343 571581 577219 576398 571722 570155 574510 577293 F3_D30 553662 547119 532764 514975 500344 490495 488197 473343 571582 577223 576399 571729 570160 574517 577296 F3_D31 205320 195997 188880 174524 174650 164857 160351 156466 195459 193368 197159 197308 202051 208050 209035 F3_D1_32 547834 533589 519107 501411 488176 476681 473928 459627 556440 561634 560091 553367 553690 558939 564516 F3_D2_32 547836 533589 519107 501411 488176 476681 473928 459627 556440 561634 560091 553367 553690 558938 564516 F3_D3_32 547834 533589 519106 501411 488176 476681 473928 459627 556440 561634 560091 553367 553690 558939 564516 F3_D4_32 547829 533588 519104 501411 488176 476681 473928 459627 556439 561634 560091 553367 553690 558937 564516 F3_D5_32 547833 533588 519107 501411 488176 476681 473928 459627 556440 561634 560091 553367 553690 558941 564516 F3_D6_32 547834 533592 519107 501411 488176 476681 473928 459627 556440 561634 560091 553367 553690 558940 564516 F3_D7_32 547835 533590 519107 501411 488176 476681 473928 459627 556439 561634 560091 553367 553690 558938 564516 F3_D8_32 547848 533593 519109 501411 488176 476681 473928 459627 556440 561634 560091 553368 553690 558845 564414 F3_D33 230314 219559 210287 194274 195102 185664 180388 175424 216257 215074 220818 223380 227738 234128 232632 F3_D34 541878 529011 518050 499910 486759 475158 472574 458510 555186 560315 559050 552358 552884 558037 563726 F3_D35SAL 547825 533593 519105 501003 487899 476290 473668 459400 556097 561155 559922 553313 553669 558842 564325 F3_D35MAH 547825 533594 519105 501004 487899 476290 473668 459401 556104 561157 559921 553316 553669 558842 564325 F3_D36 541898 529034 518056 501004 487901 476290 473667 459401 556225 561267 560004 553388 553715 558789 564261 F3_D37SAL 556092 540736 527874 510082 496282 485308 482517 467759 566300 571547 570645 564613 564697 569312 574189 F3_D37MAH 556091 540736 527874 510091 496298 485316 482519 467765 566365 571572 570700 564668 564744 569312 574189 F3_D38 541881 530240 518050 510078 496279 485309 482516 467760 566245 571516 570607 564581 564689 569334 574196 F3_D39 205321 195997 188880 501002 487898 476290 473667 459401 556096 561162 559920 553312 553668 558747 564225 F3_D40SAL 492024 476545 461380 510018 496096 485158 482452 467675 566369 571693 570829 564787 564758 569506 574403 F3_D40MAH 492032 476542 461379 510018 496073 485158 482452 467675 566369 571693 570829 564787 564758 569506 574403 F3_D41 492014 476507 461360 510016 496064 485158 482451 467675 566369 571693 570828 564787 564758 569505 0 F3_D42 492014 476507 461360 510016 496064 485158 482451 467675 566369 571693 570828 564787 564758 569505 0 F3_D43 492016 476513 461364 510018 496064 485159 482453 467675 566388 571699 570835 564792 564760 569512 575057 F3_D44 492019 476517 461368 510018 496068 485159 482452 467675 566400 571725 570849 564800 564768 569521 574416 F3_D45 541878 529011 518050 513811 499641 490267 487001 472094 567619 574018 574731 570664 571420 577080 580122 F3_D46 572241 556762 540350 519754 506996 495945 492479 477312 575947 582038 582400 578076 578262 583859 587201 F3_D47 241467 223749 211274 194728 195394 186066 180649 175651 216605 215556 220992 223435 227760 234222 232824 F3_D49 542448 529405 518218 501009 487902 476291 473672 459401 556189 561318 560126 553523 553851 559039 564534 F3_D50 542453 529411 518215 501005 487898 476291 473671 459402 556299 561590 560375 553820 554131 559265 564702 Table 5.5: FORM3 NAs After Creating NR Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 F3_D02 0 0 0 17054 22257 19340 16042 15570 13776 13351 14611 15168 16338 16277 16402 F3_D03 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D06 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 F3_D07 367486 361152 351630 7 2 11 20 7 12 36 49 12 11 8 8 F3_D08 0 0 0 416 320 709 447 269 271 27 0 15 1 0 158 F3_D09 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 F3_D10 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 F3_D11 5 24 2 2 0 0 0 0 0 0 0 0 0 0 0 F3_D12 175 180 130 29190 25644 23612 23307 22397 31629 30797 30462 30441 30185 30906 29150 F3_D13 11 24 11 11 14 8 12 3 259 350 288 172 101 177 157 F3_D14SAL 49 18 1 2 11 0 4 4 5 0 2 2 4 26 2 F3_D14MAH 117 63 0 3 9 0 4 4 27 0 11 17 5 26 2 F3_D15SAL 65 47 0 2 11 1 5 4 5 0 2 1 4 25 2 F3_D15MAH 146 115 5 5 14 2 5 4 32 0 22 22 11 25 2 F3_D16SHASLIR 0 0 0 2827 2649 2764 3027 2423 2208 2404 2329 3366 2895 3052 134 F3_D16SHASLIS 4581 4321 4098 2844 2656 2779 3041 2437 2220 2407 2338 3373 2904 3060 138 F3_D16SHHAMRO 0 0 0 2814 2552 2736 3020 2414 2208 2390 2314 3355 2884 3036 134 F3_D16SHHAMSA 3863 4247 4009 2832 2560 2750 3035 2428 2223 2395 2323 3362 2899 3047 139 F3_D17 135219 129959 126904 115169 104321 98037 99845 96763 124741 123253 124035 118002 122854 125291 507912 F3_D18SHANBEH 358 75 40 558 30 27 39 15 218 108 137 62 61 172 14 F3_D18YEKSHAN 150 71 34 569 20 27 67 32 350 125 106 49 84 176 19 F3_D18DOSHANB 130 72 47 566 23 23 33 10 307 130 98 53 64 166 14 F3_D18SESHANB 129 99 38 587 29 27 66 26 486 190 129 65 91 179 24 F3_D18CHARSHA 135 82 35 582 26 30 58 14 554 153 122 72 90 257 22 F3_D18PANSHAN 189 94 50 610 42 47 102 35 1060 309 298 182 197 363 39 F3_D18JOMEH 595 291 226 813 145 195 314 110 3377 1117 1276 759 779 1066 212 F3_D18JAM 42 16 5 522 0 0 0 0 0 0 0 0 0 65 7 F3_D19 8000 5435 5133 2891 2643 2764 3147 2456 1696 2544 2404 3450 3232 3677 1001 F3_D20 41829 27250 27616 3282 2549 2717 3039 2384 2317 2484 2417 3481 2982 3207 1748 F3_D21 0 0 0 2 1 0 0 0 55 29 18 8 4 23 17 F3_D22 0 0 0 2 2 0 0 0 59 33 24 8 5 26 21 F3_D23 9 4 3 1938 3119 3004 1851 2302 2326 2181 2067 2313 2258 2029 1979 F3_D24 0 0 0 2 1 0 0 0 48 50 28 7 4 27 22 F3_D25 20 8 2 5 12 2 3 0 82 87 83 28 12 37 30 F3_D26 16 15 11 81 101 103 61 57 344 436 525 288 278 377 361 F3_D27ROZ 14 6 3 127 322 177 24 1 4 0 0 6 2 66 233 F3_D27SAAT 2804 2994 2735 142 339 1260 1829 1640 1419 1714 834 776 458 827 1000 F3_D28 0 0 0 416 320 709 447 269 271 27 0 15 1 0 97 F3_D29 0 0 0 416 320 709 447 269 271 27 0 15 1 0 158 F3_D30 36 7 1 421 329 710 448 269 272 31 1 22 6 5 161 F3_D31 0 0 0 0 0 0 0 0 0 0 0 0 0 7 2 F3_D1_32 21 2 4 0 0 0 0 0 1 0 0 0 0 108 104 F3_D2_32 23 2 4 0 0 0 0 0 1 0 0 0 0 107 104 F3_D3_32 21 2 3 0 0 0 0 0 1 0 0 0 0 108 104 F3_D4_32 16 1 1 0 0 0 0 0 0 0 0 0 0 106 104 F3_D5_32 20 1 4 0 0 0 0 0 1 0 0 0 0 110 104 F3_D6_32 21 5 4 0 0 0 0 0 1 0 0 0 0 109 104 F3_D7_32 22 3 4 0 0 0 0 0 0 0 0 0 0 107 104 F3_D8_32 35 6 6 0 0 0 0 0 1 0 0 1 0 14 2 F3_D33 0 0 0 0 11 0 5 0 0 0 0 0 0 0 0 F3_D34 205320 195997 188880 3 0 0 0 0 0 0 0 0 0 0 0 F3_D35SAL 12 6 2 4 1 0 1 0 3 3 3 1 1 98 141800 F3_D35MAH 19 8 6 5 1 0 1 0 10 5 2 4 1 98 141800 F3_D36 359 336 369 5 3 0 0 0 131 115 85 76 47 45 38 F3_D37SAL 362 340 372 1 0 0 0 0 4 3 0 1 0 1 0 F3_D37MAH 382 367 381 9 15 7 2 5 67 28 55 57 47 1 0 F3_D38 358 368 368 0 0 0 0 0 0 0 0 0 0 30 14 F3_D39 1 0 0 3 0 0 0 0 2 10 1 0 0 3 2 F3_D40SAL 11 38 20 5 32 0 1 0 2 10 1 0 0 3 5 F3_D40MAH 44 47 33 5 9 0 1 0 2 10 1 0 0 3 5 F3_D41 1 0 0 3 0 0 0 0 2 10 1 0 0 3 0 F3_D42 1 0 0 3 0 0 0 0 2 10 1 0 0 3 0 F3_D43 3 6 4 510018 496064 485159 482453 467675 566388 571699 570835 564792 564760 569512 575057 F3_D44 6 10 8 510018 496068 485159 482452 467675 566400 571725 570849 564800 564768 569521 574416 F3_D45 358 336 368 16 2 0 5 0 2 10 1 0 0 6 5 F3_D46 359 338 368 11205 12582 12342 11520 10910 10903 11690 12981 14675 14646 15452 13635 F3_D47 5785 3 94 26 15 1 5 1 5 10 3 0 0 3 2 F3_D49 337128 333408 329338 326485 313252 311434 313321 302935 360730 367950 362967 356214 351800 350996 355501 F3_D50 337133 333414 329335 326481 313248 311434 313320 302936 360840 368222 363216 356511 352080 351222 355669 5.7.5 Changing type of variables At first, all the variables are stored as a Character vector, but this not the case, and we should change it to an appropriate one. To do so, we use function mutate_at in tidyverse package and change the type of vars to integer, factor, character as shown below: Factor_vars &lt;- c(&quot;F3_D01&quot;,&quot;F3_D02&quot;,&quot;F3_D02_87&quot;,&quot;F3_D03&quot;,&quot;F3_D04&quot;,&quot;F3_D04_87&quot;, &quot;F3_D05&quot;,&quot;F3_D05_87&quot;,&quot;F3_D06&quot;,&quot;F3_D07&quot;,&quot;F3_D08&quot;,&quot;F3_D09&quot;,&quot;F3_D10&quot;, &quot;F3_D11&quot;,&quot;F3_D12&quot;,&quot;F3_D13&quot;,&quot;F3_D17&quot;,&quot;F3_D19&quot;,&quot;F3_D20&quot;, &quot;F3_D21&quot;,&quot;F3_D22&quot;,&quot;F3_D23&quot;,&quot;F3_D24&quot;,&quot;F3_D25&quot;,&quot;F3_D26&quot;, &quot;F3_D28&quot;,&quot;F3_D29&quot;,&quot;F3_D30&quot;,&quot;F3_D31&quot;,&quot;F3_D1_32&quot;,&quot;F3_D2_32&quot;, &quot;F3_D3_32&quot;,&quot;F3_D4_32&quot;,&quot;F3_D5_32&quot;,&quot;F3_D6_32&quot;,&quot;F3_D7_32&quot;, &quot;F3_D8_32&quot;,&quot;F3_D9_32&quot;,&quot;F3_D33&quot;,&quot;F3_D34&quot;,&quot;F3_D36&quot;,&quot;F3_D38&quot;, &quot;F3_D39&quot;,&quot;F3_D41&quot;,&quot;F3_D42&quot;,&quot;F3_D43&quot;,&quot;F3_D44&quot;,&quot;F3_D45&quot;, &quot;F3_D46&quot;,&quot;F3_D47&quot;,&quot;F3_D49&quot;,&quot;F3_D50&quot;) Numeric_vars &lt;- c(&quot;F3_D14SAL&quot;,&quot;F3_D14MAH&quot;,&quot;F3_D15SAL&quot;,&quot;F3_D15MAH&quot;,&quot;F3_D16SHASLIR&quot;, &quot;F3_D16SHASLIS&quot;,&quot;F3_D16SHHAMRO&quot;,&quot;F3_D16SHHAMSA&quot;, &quot;F3_D18SHANBEH&quot;,&quot;F3_D18YEKSHAN&quot;,&quot;F3_D18DOSHANB&quot;,&quot;F3_D18SESHANB&quot;, &quot;F3_D18CHARSHA&quot;,&quot;F3_D18PANSHAN&quot;,&quot;F3_D18JOMEH&quot;,&quot;F3_D18JAM&quot;, &quot;F3_D27ROZ&quot;,&quot;F3_D27SAAT&quot;,&quot;F3_D35SAL&quot;,&quot;F3_D35MAH&quot;,&quot;F3_D37SAL&quot;, &quot;F3_D37MAH&quot;,&quot;F3_D40SAL&quot;,&quot;F3_D40MAH&quot;,&quot;F3_D48SAAT&quot;,&quot;F3_D48ROZ&quot;) Character_vars &lt;- c(&quot;Pkey&quot;) for (year in N) { FORM3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/FORM3.RDS&quot;)) FORM3 &lt;- FORM3%&gt;% mutate_at(vars(Factor_vars[Factor_vars %in% colnames(FORM3)]),as.factor)%&gt;% mutate_at(vars(Numeric_vars[Numeric_vars %in% colnames(FORM3)]),as.integer)%&gt;% mutate_at(vars(Character_vars[Character_vars %in% colnames(FORM3)]),as.character) saveRDS(FORM3,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM3.RDS&quot;)) } 5.7.6 Correcting time and day inconsistencies According to their answer to questions, some observations work more than 7 days a week! or work on average more than 24 hours in a day! Which is not make sense. To correct these inconsistencies, we should check the number of them and replace them with NA if there is not a lot. So we represent the number of them in the following table. Table 5.6: FORM3 Time and Day Inconsistencies Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 F3_D14MAH 57 40 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D15MAH 67 66 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D16SHASLIR 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D16SHASLIS 34 24 26 17 7 15 13 14 12 3 9 7 9 8 4 F3_D16SHHAMRO 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D16SHHAMSA 40 18 20 18 8 14 15 14 15 5 9 7 15 11 5 F3_D27ROZ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 F3_D27SAAT 37 31 25 15 15 10 15 23 9 14 5 7 9 6 9 F3_D35MAH 7 1 4 0 0 0 0 0 0 0 0 0 0 0 0 F3_D37MAH 21 27 9 0 0 0 0 0 0 0 0 0 0 0 0 F3_D40MAH 25 12 14 0 0 0 0 0 0 0 0 0 0 0 0 As we can see, these observations are not too much, and we can turn them to Na with the following code. for (year in N) { FORM3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/FORM3.RDS&quot;)) FORM3 &lt;- FORM3%&gt;% mutate(F3_D14MAH = ifelse(F3_D14MAH &gt; 12,NA,F3_D14MAH), F3_D15MAH = ifelse(F3_D15MAH &gt; 12,NA,F3_D15MAH), F3_D16SHASLIR = ifelse(F3_D16SHASLIR &gt; 7,NA,F3_D16SHASLIR), F3_D16SHASLIS = ifelse((F3_D16SHASLIS/F3_D16SHASLIR) &gt; 24,NA,F3_D16SHASLIS), F3_D16SHHAMRO = ifelse(F3_D16SHHAMRO &gt; 7,NA,F3_D16SHHAMRO), F3_D16SHHAMSA = ifelse((F3_D16SHHAMSA/F3_D16SHHAMRO) &gt; 24,NA,F3_D16SHHAMSA), F3_D27ROZ = ifelse(F3_D27ROZ &gt; 7,NA,F3_D27ROZ), F3_D27SAAT = ifelse((F3_D27SAAT/F3_D27ROZ) &gt;24,NA,F3_D27SAAT), F3_D35MAH = ifelse(F3_D35MAH &gt; 12,NA,F3_D35MAH), F3_D37MAH = ifelse(F3_D37MAH &gt; 12,NA,F3_D37MAH), F3_D40MAH = ifelse(F3_D40MAH &gt; 12,NA,F3_D40MAH)) saveRDS(FORM3,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM3.RDS&quot;)) } 5.7.7 Integrating F3_D10 F3_D10 is a variable explains the main activity of the workplace, the values of which are 4-digit codes, the first 2 digits of which indicate the main groups of industries, and the next digits indicate the classes and sub-classes of the main industries. In fact, the main activity of the workplace is based on localized versions of The International Standard Industrial Classification, ISIC (of course, the localized version is not much different from the international version. To check these minor differences, you can refer to the standards published by the Statistical Center of Iran) In Iran, for the years 1384 to 1386, 1387 to 1392 and 1392 so far the localized versions of ISIC.Rev.3 , ISIC.Rev.3.1 and ISIC.Rev4 are used, respectively. There are some changes from each version to the next one and its not possible to follow all the codes consistently during the time. However, we tried to create consistent main groups over the time. To do so, we use the file file name and below code: 5.8 FORM2ZOJ Cleaning 5.8.1 Renaming variables and integrating data As mentioned, variables are stored with different names in different years, and FORM2JOZs variables are no exception to this case, and it is necessary that the names of each variable be changed to a single name in different years, which is the same as before. And you can see more details in this regard with the names of the variables in different years and the ways that it is going to be converted in LFS_Colnames file. Again in the Year 1384 third and fourth digit of Pkey indicate Month , Not Season, and we convert it to the season as below: FORM2JOZ &lt;- FORM2JOZ%&gt;% mutate(Season = ifelse((str_sub(PKEY,3,4) %in% c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;)),&quot;01&quot;, ifelse((str_sub(PKEY,3,4)%in% c(&quot;04&quot;,&quot;05&quot;,&quot;06&quot;)),&quot;02&quot;, ifelse((str_sub(PKEY,3,4)%in% c(&quot;07&quot;,&quot;08&quot;,&quot;09&quot;)), &quot;03&quot;,&quot;04&quot;))))%&gt;% mutate(Pkey = paste0(str_sub(PKEY,1,2),Season,str_sub(PKEY,5,12)),F2_D01)%&gt;% select(-Season,-PKEY) In some years, F2_D01, which indicates the row number of a household member, is one digit which should be in a two-digit format like as other years and we correct it by the following code FORM2JOZ&lt;- FORM2JOZ%&gt;% mutate(Pkey = case_when( nchar(F2_D01)== 1 ~ paste0(PKEY,&quot;0&quot;,F2_D01), nchar(F2_D01)== 2 ~ paste0(PKEY, F2_D01) )) %&gt;% select(-PKEY)%&gt;% mutate(Age = ifelse(Age %in% c(&quot;**&quot;,&quot;-2&quot;),&quot;101&quot;,Age))%&gt;% mutate_at(vars(Age),as.integer)%&gt;% mutate(Age = ifelse(Age &gt;=101 , 101 , Age)) 5.8.2 Changing Type, Renaming Labels, Creating NR The type and value of variables changed to the desired one in the way as explained in FORM3 cleaning Part and like before NR created to distinguish between NAs and Not related values. For more detail about the value of variable or label assimilation, you can see the Form2joz_Labels excel file, and for more detail on the logic of creating NR, you can find one in the Meta Data excel file. 5.8.2.1 Changing Type F2J_colnames &lt;- read_xlsx(Col_name_path,sheet = &quot;FORM2JOZ&quot;) F2J_RDS_Path &lt;- RDS_path[str_detect(RDS_path,&quot;FORM2JOZ.RDS|9802|9803|9804&quot;)] Factor_vars &lt;- c(&quot;Relation&quot;,&quot;Gender&quot;,&quot;Birth_Month&quot;,&quot;Nationality&quot;,&quot;Residence_Status&quot;, &quot;Residence_Duration&quot;,&quot;F2_D11&quot;,&quot;F2_D12&quot;,&quot;F2_D13&quot;,&quot;F2_D14&quot;,&quot;Student&quot;, &quot;Literacy&quot;,&quot;Degree&quot;,&quot;Field_Study&quot;,&quot;Marriage_Status&quot;) Numeric_vars &lt;- c(&quot;Birth_Year&quot;,&quot;Age&quot;) Character_vars &lt;- c(&quot;Pkey&quot;,&quot;F2_D01&quot;) FORM2JOZ &lt;- FORM2JOZ%&gt;% mutate_at(vars(Factor_vars[Factor_vars %in% colnames(FORM2JOZ)]),as.factor)%&gt;% mutate_at(vars(Numeric_vars[Numeric_vars %in% colnames(FORM2JOZ)]),as.integer)%&gt;% mutate_at(vars(Character_vars[Character_vars %in% colnames(FORM2JOZ)]),as.character)%&gt;% select(colnames(FORM2JOZ)[colnames(FORM2JOZ)%in% c(colnames(F2J_colnames),&quot;Pkey&quot;)]) 5.8.2.2 Unknowns and label assimilation Like what we discussed in the Form 3 Cleaning part, FORM2JOZ variables have some unknown values for some observation which the number of them is presented in the following tables, and like before. We turn them to missings in the label assimilation part &amp;&amp; Table 5.7: FORM2JOZ &amp;&amp; Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Degree 162 89 34 0 0 0 0 0 0 0 0 0 0 0 0 &amp; Table 5.8: FORM2JOZ &amp; Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Nationality 9 0 1 0 4 0 0 0 0 0 1 0 0 0 0 Residence_Status 196 12 9 1 0 0 0 0 1 0 1 0 0 0 0 Residence_Duration 7 2 0 0 0 0 0 0 0 0 0 0 0 0 0 F2_D12 5 3 0 8 0 0 0 0 18 0 18 33 24 34 25 F2_D14 0 0 0 0 0 0 0 0 0 0 1 0 0 2 0 Student 10 5 1 1 26 0 0 0 8 0 0 0 0 0 0 Literacy 0 0 0 0 26 0 0 0 0 0 0 0 0 0 0 Marriage_Status 22 9 1 0 0 0 0 0 0 0 0 0 0 9 15 Table 5.9: FORM2JOZ - Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Student 0 0 0 0 378 1536 0 0 0 0 0 0 0 0 0 Literacy 0 0 0 0 378 1536 0 0 0 0 0 0 0 0 0 Fac_vars &lt;- excel_sheets(F2J_Labels_path) Fac_vars &lt;- Fac_vars[excel_sheets(F2J_Labels_path) %in% colnames(FORM2JOZ)] for (i in 1:length(Fac_vars)) { Levels &lt;- read_xlsx(F2J_Labels_path,sheet = Fac_vars[i]) Levels[Levels == &quot;space&quot;] &lt;- &quot; &quot; Levels[Levels == &quot;2space&quot;] &lt;- &quot; &quot; Levels[Levels == &quot;0space&quot;] &lt;- &quot;&quot; Levels_Value &lt;- colnames(Levels)[!str_detect(colnames(Levels),&quot;\\\\...&quot;)] for (j in 2:length(Levels_Value)) { L &lt;- eval(parse(text = paste0(&quot;FORM2JOZ$&quot;,Fac_vars[i],&quot;==&quot;,&quot;Levels$&quot;,Levels_Value[j],&quot;[Levels$Year ==&quot;,year,&quot;]&quot;))) eval(parse(text = paste0(&quot;FORM2JOZ$&quot;,Fac_vars[i],&quot;[L]&quot;,&quot; &lt;- &quot;,&quot;Levels$&quot;,Levels_Value[j],&quot;[1]&quot;))) } } 5.8.2.3 Creating NR ** FORM2JOZ NAs Before Creating NR Table 5.10: FORM2JOZ NAs Before Creating NR Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Birth_Month 48595 38557 43946 43675 46046 37883 42748 45617 43029 35535 41323 42299 36590 43169 36957 Birth_Year 19645 13280 12960 13032 18138 12481 12699 14401 4219 6178 8671 9957 7820 11792 10570 Age 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 Nationality 9 0 1 0 4 0 0 0 0 0 1 0 0 0 0 Residence_Status 196 12 9 1 0 0 0 0 1 0 1 0 0 0 0 Residence_Duration 9970 8547 7690 6731 8460 7328 6978 6329 11280 10006 9336 8947 9061 9927 8399 F2_D11 633459 615190 595820 573261 574313 559350 554389 533034 659280 666440 672621 667138 664810 678021 677602 F2_D12 670178 648597 628216 602858 597448 581094 575559 555606 688460 695100 696613 690838 690697 704378 526304 F2_D13 674269 652144 631408 605653 600615 584657 578227 558482 691220 697596 699057 693353 693536 707573 528375 F2_D14 676759 654846 633928 608026 602660 587118 580577 560596 693598 699765 701239 695572 695958 709727 709148 Student 58836 55619 53257 49143 55548 53698 49546 45970 69823 69196 69106 68399 68204 75180 71082 Literacy 58826 55614 53256 49142 55522 53698 49546 45970 69815 69196 69106 68399 68204 75180 71082 Degree 163879 158138 152064 147487 161786 156251 149347 143500 176255 177391 173980 171429 169167 169424 164378 Field_Study 629688 605423 581867 432509 443619 429074 418819 403585 485955 493437 495739 492235 491501 490909 0 Marriage_Status 104482 98143 93737 87028 94235 89784 86728 82139 116533 116612 117681 116251 116655 125025 90163 FORM2JOZs NAs After Creating NR Table 5.11: FORM2JOZ NAs After Creating NR Year 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Birth_Month 552156 533231 518921 498388 493666 479098 475544 458816 564563 571217 574631 569643 567678 579954 577024 Birth_Year 19645 13280 12960 13032 18138 12481 12699 14401 4219 6178 8671 9957 7820 11792 10570 Age 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 Nationality 9 0 1 0 4 0 0 0 0 0 1 0 0 0 0 Residence_Status 196 12 9 1 0 0 0 0 1 0 1 0 0 0 0 Residence_Duration 8 2 0 0 0 0 0 0 0 0 0 0 0 0 0 F2_D11 8 2 0 0 0 0 0 0 0 0 0 0 0 0 0 F2_D12 13 5 0 8 0 0 0 0 18 32 21 33 42 34 25 F2_D13 27 26 12 2 4 1 33 8 0 0 10 6 5 8 3 F2_D14 197 12 9 1 0 0 1 0 1 2 6 0 1 2 0 Student 10 5 1 1 404 1536 0 0 8 0 0 0 0 0 0 Literacy 0 0 0 0 404 1536 0 0 0 0 0 0 0 0 0 Degree 166 89 34 0 404 1536 0 0 0 0 0 0 0 0 0 Field_Study 134704 129410 125168 0 404 1536 0 0 0 0 0 0 0 0 0 Marriage_Status 22 9 1 0 0 0 0 0 0 0 0 0 0 9 15 5.9 FORM2KOL Cleaning 5.9.1 Renaming variables F2K_colnames &lt;- read_xlsx(Col_name_path,sheet = &quot;FORM2KOL&quot;) F2K_RDS_Path &lt;- RDS_path[str_detect(RDS_path,&quot;FORM2KOL.RDS|9802|9803|9804&quot;)] for (year in First_year:Last_year) { index &lt;- match(F2K_colnames$Year_Season[str_detect(F2K_colnames$Year_Season,paste0(&quot;^&quot;,year))],F2K_colnames$Year_Season) FORM2KOL &lt;- tibble() for (j in index) { F2K &lt;- readRDS(F2K_RDS_Path[str_detect(F2K_RDS_Path, as.character(F2K_colnames$Year_Season[j]))]) for (i in 2:length(colnames(F2K_colnames))) { names(F2K)[names(F2K) == eval(parse(text=paste0(&quot;F2K_colnames&quot;,&quot;$&quot;,colnames(F2K_colnames)[i])))[j]] &lt;- colnames(F2K_colnames)[i] } F2K &lt;- F2K %&gt;% mutate_all(as.character) FORM2KOL &lt;- bind_rows(FORM2KOL,F2K) } saveRDS(FORM2KOL,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM2KOL.RDS&quot;)) } 5.9.2 integrating data if (year == 84) { FORM2KOL &lt;- FORM2KOL%&gt;% mutate(Season = ifelse((str_sub(YSHHID,3,4) %in% c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;)),&quot;01&quot;, ifelse((str_sub(YSHHID,3,4)%in% c(&quot;04&quot;,&quot;05&quot;,&quot;06&quot;)),&quot;02&quot;, ifelse((str_sub(YSHHID,3,4)%in% c(&quot;07&quot;,&quot;08&quot;,&quot;09&quot;)), &quot;03&quot;,&quot;04&quot;))))%&gt;% mutate(YSHHID = paste0(str_sub(YSHHID,1,2),Season,str_sub(YSHHID,5,12)))%&gt;% select(-Season) } saveRDS(FORM2KOL,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM2KOL.RDS&quot;)) 5.10 W3 Cleaning 5.10.1 Renaming variables and integrating data W3_colnames &lt;- read_xlsx(Col_name_path,sheet = &quot;W3&quot;) W3_RDS_Path &lt;- RDS_path[str_detect(RDS_path,&quot;W3.RDS|9802|9803|9804&quot;)] for (year in First_year:Last_year) { index &lt;- match(W3_colnames$Year_Season[str_detect(W3_colnames$Year_Season,paste0(&quot;^&quot;,year))],W3_colnames$Year_Season) W3 &lt;- tibble() for (j in index) { ww &lt;- readRDS(W3_RDS_Path[str_detect(W3_RDS_Path, as.character(W3_colnames$Year_Season[j]))]) for (i in 2:length(colnames(W3_colnames))) { names(ww)[names(ww) == eval(parse(text=paste0(&quot;W3_colnames&quot;,&quot;$&quot;,colnames(W3_colnames)[i])))[j]] &lt;- colnames(W3_colnames)[i] } ww &lt;- ww %&gt;% mutate_all(as.character) W3 &lt;- bind_rows(W3,ww) } if (year == 84) { W3 &lt;- W3%&gt;% mutate(Season = ifelse(str_sub(PKEY,3,4) %in% c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;),&quot;01&quot;, ifelse(str_sub(PKEY,3,4) %in% c(&quot;04&quot;,&quot;05&quot;,&quot;06&quot;),&quot;02&quot;, ifelse(str_sub(PKEY,3,4) %in% c(&quot;07&quot;,&quot;08&quot;,&quot;09&quot;),&quot;03&quot;,&quot;04&quot;))))%&gt;% mutate(PKEY = paste0(str_sub(PKEY,1,2),Season,str_sub(PKEY,5,12)))%&gt;% select(-Season) } if (year == 97) { FORM2JOZ &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/FORM2JOZ.RDS&quot;)) FORM2JOZ &lt;- FORM2JOZ%&gt;% dplyr::rename(&quot;AGE&quot; = &quot;Age&quot;, &quot;GENDER&quot; = &quot;Gender&quot;)%&gt;% select(Pkey,GENDER,AGE) W3 &lt;- W3%&gt;% mutate(Pkey = case_when( nchar(F2_D01)==1~ paste0(PKEY,&quot;0&quot;,F2_D01), nchar(F2_D01)==2~ paste0(PKEY,F2_D01)))%&gt;% left_join(FORM2JOZ,by = &quot;Pkey&quot;) rm(FORM2JOZ) } W3 &lt;- W3%&gt;% mutate(AGE =ifelse(AGE %in% c(&quot;**&quot;,&quot;-2&quot;),&quot;101&quot;,AGE), F2_D01 = ifelse(nchar(F2_D01)==1,paste0(&quot;0&quot;,F2_D01),F2_D01), Year = str_sub(PKEY,1,2), Season = str_sub(PKEY,3,4), Province_ID = str_sub(PKEY,5,6), Rural = str_sub(PKEY ,7,7), Pkey = paste0(PKEY,F2_D01), HHID = case_when( year %in% c(&quot;84&quot;,&quot;85&quot;,&quot;86&quot;,&quot;87&quot;) ~ paste0(&quot;01&quot;,str_sub(Pkey,5,12)), year %in% c(&quot;88&quot;,&quot;89&quot;,&quot;90&quot;,&quot;91&quot;) ~ paste0(&quot;02&quot;,str_sub(Pkey,5,12)), year %in% c(&quot;92&quot;,&quot;93&quot;,&quot;94&quot;,&quot;95&quot;,&quot;96&quot;) ~ paste0(&quot;03&quot;,str_sub(Pkey,5,12)), year %in% c(&quot;97&quot;,&quot;98&quot;) ~ paste0(&quot;04&quot;,str_sub(Pkey,5,12))))%&gt;% mutate(IID = paste0(HHID,F2_D01), Adj_IW_Seasonly = IW_Seasonly)%&gt;% select(-PKEY)%&gt;% mutate_at(vars(AGE,IW_Seasonly,Adj_IW_Seasonly),as.numeric) saveRDS(W3,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/W3.RDS&quot;)) } 5.10.2 WeigthAdjusment As mentioned, the weight of each observation indicates that each person in the sample represents how many people in the country, so the sum of these weights should be equal to the total population of the country. And since the information about the countrys total population is obtained every 5 years using census data. This population should be estimated in the middle years that the Statistics Center uses Post Censal estimation to estimate the population. But when an Accurate population reveals years later, when can have an intercensal estimate of population, which is a better estimate than postcensal estimates. For this purpose, we divide the population into 12 groups based on being male or female, urban or rural, and three age groups ( below 10 years, 10-64 years and more than 65 years). And calculate the adjustment coefficient as below: Intercensal &lt;- read_xlsx(paste0(Files_paths,&quot;/&quot;,&quot;Cencus75_95.xlsx&quot;),sheet = &quot;Intercensal_pop&quot;) for (year in First_year:Last_year) { W3&lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/W3.RDS&quot;)) W3 &lt;- W3%&gt;% mutate(Age_Cat = case_when( AGE &lt;= 9 ~ &quot;0-9&quot;, AGE &gt;=10 &amp; AGE&lt;=64 ~&quot;10-64&quot;, AGE &gt;=65 ~ &quot;65+&quot; ))%&gt;% mutate_at(vars(GENDER,Rural,Age_Cat),as.factor)%&gt;% group_by(Age_Cat,GENDER,Rural)%&gt;% dplyr::mutate(CSP = 0.25*sum(IW_Seasonly,na.rm = T))%&gt;% ungroup()%&gt;% mutate(R_Sub_Pop = NA) W3$C_Sub_Pop &lt;- NULL W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &#39;2&#39; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &gt;=65] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &#39;2&#39; &amp; W3$AGE &gt;=65],na.rm = true) W3$C_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &gt;=65] &lt;- 0.25*sum(W3$IW_Seasonly[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &gt;=65],na.rm = true) if (year&gt;=85 &amp; year &lt;=95) { W3$R_Sub_Pop &lt;- NULL W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9] &lt;- Intercensal$Male_0_9_U[Intercensal$Year == year] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &lt;=9] &lt;- Intercensal$Female_0_9_U[Intercensal$Year == year] W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9] &lt;- Intercensal$Male_0_9_R[Intercensal$Year == year ] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &lt;=9] &lt;- Intercensal$Female_0_9_R[Intercensal$Year == year ] W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- Intercensal$Male_10_64_U[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- Intercensal$Female_10_64_U[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- Intercensal$Male_10_64_R[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; (W3$AGE &gt;= 10 &amp; W3$AGE &lt;= 64)] &lt;- Intercensal$Female_10_64_R[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65] &lt;- Intercensal$Male_65_U[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;1&quot; &amp; W3$AGE &gt;=65] &lt;- Intercensal$Female_65_U[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;1&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &gt;=65] &lt;- Intercensal$Male_65_R[Intercensal$Year== year] W3$R_Sub_Pop[W3$GENDER == &quot;2&quot; &amp; W3$Rural == &quot;2&quot; &amp; W3$AGE &gt;=65] &lt;- Intercensal$Female_65_R[Intercensal$Year== year] } W3&lt;- W3 %&gt;% mutate(Adj_Coef = R_Sub_Pop/C_Sub_Pop)%&gt;% mutate(Adj_IW_Seasonly = ifelse(!is.na(Adj_Coef),Adj_Coef*IW_Seasonly,Adj_IW_Seasonly)) W3_A&lt;- W3%&gt;% select(Pkey,Year,Season,HHID,IID,Province_ID, Rural,IW_Seasonly,Adj_IW_Seasonly) W3_EX &lt;- W3%&gt;% select(-colnames(W3_A),Pkey)%&gt;% select(Pkey,everything()) saveRDS(W3_A,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;W3.RDS&quot;)) saveRDS(W3_EX,paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;W3_EX.RDS&quot;)) } Now adjusted weight drive from multiplying adjustment coefficient to the not adjusted weight 5.11 Data Validation This part checks demographic characteristics and labor force indicators calculated from cleaned data with a statistical center report to ensure cleaning procedure. First, we calculate demographic and labor force indicators according to the following code, then plot reported vs. calculated indicators. * Demographic indicators Total_Pop_C &lt;- tibble( Year = numeric(), Total_population = numeric(), Male_T = numeric(), Female_T = numeric(), Urban_T = numeric(), Urban_M = numeric(), Urban_F = numeric(), Rural_T = numeric(), Rural_M = numeric(), Rural_F = numeric(), ) Age10_Pop_C &lt;- tibble( Year = numeric(), Age10_population = numeric(), Age_10_Male = numeric(), Age_10_Female = numeric(), Age_10_Urban_T = numeric(), Age_10_Urban_M = numeric(), Age_10_Urban_F = numeric(), Age_10_Rural_T = numeric(), Age_10_Rural_M = numeric(), Age_10_Rural_F = numeric(), ) for (i in First_year :Last_year) { FORM2 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,i,&quot;/&quot;,&quot;FORM2JOZ.RDS&quot;)) FORM2 &lt;- FORM2%&gt;% select(Pkey,Age,Gender) W3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,i,&quot;/&quot;,&quot;W3.RDS&quot;)) W3 &lt;- W3%&gt;% select(Pkey,Rural,IW_Seasonly)%&gt;% left_join(FORM2,by = &quot;Pkey&quot;) Total_Pop_C &lt;- Total_Pop_C %&gt;% add_row( Year = i, Total_population = 0.25*sum(W3$IW_Seasonly,na.rm = true), Male_T = 0.25*sum(W3$IW_Seasonly[W3$Gender==&quot;Male&quot;],na.rm = true), Female_T = 0.25*sum(W3$IW_Seasonly[W3$Gender==&quot;Female&quot;],na.rm = true), Urban_T = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;1&quot;],na.rm = true), Urban_M = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;1&quot; &amp; W3$Gender==&quot;Male&quot; ],na.rm = true), Urban_F = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;1&quot; &amp; W3$Gender==&quot;Female&quot; ],na.rm = true), Rural_T = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;2&quot;],na.rm = true), Rural_M = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;2&quot; &amp; W3$Gender==&quot;Male&quot; ],na.rm = true), Rural_F = 0.25*sum(W3$IW_Seasonly[W3$Rural==&quot;2&quot; &amp; W3$Gender==&quot;Female&quot; ],na.rm = true) ) Age10_Pop_C &lt;- Age10_Pop_C %&gt;% add_row( Year = i, Age10_population = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10],na.rm = true), Age_10_Male = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Gender == &quot;Male&quot;],na.rm = true), Age_10_Female = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Gender == &quot;Female&quot;],na.rm = true), Age_10_Urban_T = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;1&quot;],na.rm = true), Age_10_Urban_M = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;1&quot; &amp; W3$Gender == &quot;Male&quot;],na.rm = true), Age_10_Urban_F = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;1&quot; &amp; W3$Gender == &quot;Female&quot;],na.rm = true), Age_10_Rural_T = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;2&quot;],na.rm = true), Age_10_Rural_M = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;2&quot; &amp; W3$Gender == &quot;Male&quot;],na.rm = true), Age_10_Rural_F = 0.25*sum(W3$IW_Seasonly[W3$Age &gt;= 10 &amp; W3$Rural == &quot;2&quot; &amp; W3$Gender == &quot;Female&quot;],na.rm = true), ) } Labor force indicators LFS_Indicators_S &lt;- tibble( Year = numeric(), Season = character(), Male_Employment = numeric(), Female_Employment = numeric(), Total_Employment = numeric(), Male_Unemployment = numeric(), Female_Unemployment = numeric(), Total_Unemployment = numeric(), Male_Participation = numeric(), Female_Participation= numeric(), Total_Participation = numeric(), Rural_Employment = numeric(), Rural_Unemployment = numeric(), Rural_Participation = numeric(), Urban_Employment = numeric(), Urban_Unemployment = numeric(), Urban_Participation = numeric() ) LFS_Indicators_Y &lt;- tibble( Year = numeric(), Male_Employment = numeric(), Female_Employment = numeric(), Total_Employment = numeric(), Male_Unemployment = numeric(), Female_Unemployment = numeric(), Total_Unemployment = numeric(), Male_Participation = numeric(), Female_Participation= numeric(), Total_Participation = numeric(), Rural_Employment = numeric(), Rural_Unemployment = numeric(), Rural_Participation = numeric(), Urban_Employment = numeric(), Urban_Unemployment = numeric(), Urban_Participation = numeric() ) for (year in First_year:Last_year) { FORM3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM3.RDS&quot;)) FORM3 &lt;- FORM3%&gt;% select(Pkey,F3_D01,F3_D02,F3_D03,F3_D06,F3_D08,F3_D31,F3_D33,F3_D34) FORM2 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;FORM2JOZ.RDS&quot;)) FORM2 &lt;- FORM2%&gt;% select(Pkey,Age,Gender) W3 &lt;- readRDS(paste0(Processd_data_Path,&quot;/&quot;,year,&quot;/&quot;,&quot;W3.RDS&quot;)) W3 &lt;- W3 %&gt;% select(Pkey,IW_Seasonly,Rural,Season) F3 &lt;- FORM3%&gt;% left_join(FORM2,by=&quot;Pkey&quot;)%&gt;% left_join(W3,by = &quot;Pkey&quot;)%&gt;% mutate(Employed = case_when( F3_D01 == &quot;Yes&quot;|F3_D02 == &quot;Yes&quot;|F3_D03 == &quot;Yes&quot;|F3_D06 == &quot;Yes&quot;|F3_D08 == &quot;Yes&quot; ~ 1, F3_D01 == &quot;No&quot;|F3_D02 == &quot;No&quot;|F3_D03 == &quot;No&quot;|F3_D06 == &quot;No&quot;|F3_D08 == &quot;No&quot; ~ 0))%&gt;% mutate(Unemployed = case_when( Employed == 0 &amp; F3_D31 == &quot;Yes&quot; &amp; F3_D34 == &quot;Yes&quot; ~ 1, Employed == 0 &amp; F3_D31 == &quot;No&quot; &amp; F3_D33 %in% c(&quot;First&quot;,&quot;Secound&quot;) &amp; F3_D34 == &quot;Yes&quot; ~ 1 )) rm(FORM3,FORM2,W3) for (k in c(&quot;01&quot;,&quot;02&quot;,&quot;03&quot;,&quot;04&quot;)) { LFS_Indicators_S &lt;- LFS_Indicators_S %&gt;% add_row( Year = year, Season = k, Male_Employment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Gender == &quot;Male&quot; &amp; F3$Employed == 1],na.rm = true), Female_Employment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Gender == &quot;Female&quot; &amp; F3$Employed == 1],na.rm = true), Male_Unemployment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Gender == &quot;Male&quot; &amp; F3$Unemployed == 1],na.rm = true), Female_Unemployment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Gender == &quot;Female&quot; &amp; F3$Unemployed == 1],na.rm = true), Rural_Employment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Rural == 2 &amp; F3$Employed == 1],na.rm = true), Rural_Unemployment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Rural == 2 &amp; F3$Unemployed == 1],na.rm = true), Urban_Employment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Rural == 1 &amp; F3$Employed == 1],na.rm = true), Urban_Unemployment = sum(F3$IW_Seasonly[F3$Season == k &amp; F3$Rural == 1 &amp; F3$Unemployed == 1],na.rm = true), ) } LFS_Indicators_Y &lt;- LFS_Indicators_Y %&gt;% add_row( Year = year, Male_Employment = mean(LFS_Indicators_S$Male_Employment[LFS_Indicators_S$Year==year]), Female_Employment = mean(LFS_Indicators_S$Female_Employment[LFS_Indicators_S$Year==year]), Male_Unemployment = mean(LFS_Indicators_S$Male_Unemployment[LFS_Indicators_S$Year==year]), Female_Unemployment = mean(LFS_Indicators_S$Female_Unemployment[LFS_Indicators_S$Year==year]), Rural_Employment = mean(LFS_Indicators_S$Rural_Employment[LFS_Indicators_S$Year==year]), Rural_Unemployment = mean(LFS_Indicators_S$Rural_Unemployment[LFS_Indicators_S$Year==year]), Urban_Employment = mean(LFS_Indicators_S$Urban_Employment[LFS_Indicators_S$Year==year]), Urban_Unemployment = mean(LFS_Indicators_S$Urban_Unemployment[LFS_Indicators_S$Year==year]) ) } LFS_Indicators_S &lt;- LFS_Indicators_S %&gt;% mutate(Total_Employment = Female_Employment + Male_Employment)%&gt;% mutate(Total_Unemployment = Female_Unemployment + Male_Unemployment)%&gt;% mutate(Total_Participation = Total_Employment + Total_Unemployment)%&gt;% mutate(Rural_Participation = Rural_Employment + Rural_Unemployment)%&gt;% mutate(Urban_Participation = Urban_Employment + Urban_Unemployment) %&gt;% mutate(Male_Participation = Male_Employment + Male_Unemployment)%&gt;% mutate(Female_Participation = Female_Employment + Female_Unemployment) LFS_Indicators_Y &lt;- LFS_Indicators_Y %&gt;% mutate(Total_Employment = Female_Employment + Male_Employment)%&gt;% mutate(Total_Unemployment = Female_Unemployment + Male_Unemployment)%&gt;% mutate(Total_Participation = Total_Employment + Total_Unemployment)%&gt;% mutate(Rural_Participation = Rural_Employment + Rural_Unemployment)%&gt;% mutate(Urban_Participation = Urban_Employment + Urban_Unemployment) %&gt;% mutate(Male_Participation = Male_Employment + Male_Unemployment)%&gt;% mutate(Female_Participation = Female_Employment + Female_Unemployment) saveRDS(LFS_Indicators_S,&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/R Codes/Consistency/LFS_Indicators_S.RDS&quot;) saveRDS(LFS_Indicators_Y,&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/R Codes/Consistency/LFS_Indicators_Y.RDS&quot;) Calculated vs Reported (Demographic indc) Age10_Pop_C &lt;- readRDS(&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/R Codes/Consistency/Age10_Pop_C.RDS&quot;) Total_Pop_C &lt;- readRDS(&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/R Codes/Consistency/Total_Pop_C.RDS&quot;) Age10_Pop_R &lt;- read_excel(&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/Files/Pop_Reported_Indicatores.xlsx&quot; , sheet = &quot;Age10_Population&quot;) Total_Pop_R &lt;- read_excel(&quot;C:/Users/ali/Dropbox/LFS Cleaning/GitHub/Files/Pop_Reported_Indicatores.xlsx&quot; , sheet = &quot;Total_Population&quot;) Demog &lt;- function(Demografic_var,xlab =&quot;Year&quot;,ylab = Demografic_var, title =&quot;&quot;,df_1,df_2) { colors &lt;- c(&quot;Calculated&quot; = &quot;black&quot;,&quot;Reported&quot; = &quot;red&quot;) linetypes&lt;- c(&quot;Calculated&quot; = 2,&quot;Reported&quot; = 4) shapes &lt;- c(&quot;Calculated&quot; = 15,&quot;Reported&quot; = 17) P&lt;- ggplot(mapping = aes(x = Year ,y = eval(parse(text = Demografic_var))/1000000 ,group =1 ))+ geom_line(data = df_1 ,aes(color = &quot;Calculated&quot;,lty = &quot;Calculated&quot;) )+ geom_point(data = df_1 ,aes(color = &quot;Calculated&quot;,shape = &quot;Calculated&quot;))+ geom_line(data = df_2,aes(color=&quot;Reported&quot;,lty =&quot;Reported&quot; ))+ geom_point(data = df_2,aes(color=&quot;Reported&quot;,shape = &quot;Reported&quot;))+ theme( legend.position = &quot;bottom&quot;, legend.justification = &quot;bottom&quot;, legend.box.just = &quot;right&quot;, legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text( face = &quot;bold&quot;,color = &quot;black&quot;, size = 10), plot.title = element_text(hjust = 0.5))+ labs(title = title, x=xlab , y=ylab ,color = &quot;Legend&quot;)+ guides(x = guide_axis(angle = 90))+ scale_color_manual(&quot;&quot;,values = colors)+ scale_linetype_manual(&quot;&quot;,values = linetypes)+ scale_shape_manual(&quot;&quot;,values = shapes) return(P) } 5.12 Exporting DTA 5.13 Correcting Inconsistencies 5.13.1 Panel Inconsistency The labor force survey data were collected by the rotating panel method with a 2-2-2 pattern. In fact, the Statistical Center id Iran does not track people to collect data in the form of a panel. Instead, they track addresses where peoples live. Some of these people are present 1, some 2, some 3, and some 4 times in the sample. And when we look at people with the same ID, some observations, despite the same ID, have different characteristics such as age and gender. Therefore it can not be said that this person is the same as before in previous seasons or Years. Some of these inconsistencies are due to the movement of people. In fact, as mentioned, the Statistics Center of Iran refers to specific addresses overtime to collect this data, which made it possible that a new household lives in that address. Correcting HHID To correcting inconsistencies due to household replacement, we need to correct HHID and assign a new HHID to the replaced household. To do So, we use The F2Kol_Jaygozin Variable in FORM2Kol, which indicate if a family is replaced or not. You can see More detail About this part in the Appendix Correcting IID As mentioned, Some of the Inconsistencies are due to household replacement which is corrected by assigning new HHID to The replaced households. Still, some of these inconsistencies remain after this correction, and we should define new IID for individuals according to their birth year and gender. "]]
